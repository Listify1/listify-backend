package com.listify.backend.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import lombok.*;
import java.util.List;

/**
 * Represents a shopping list, which contains a collection of items to be purchased.
 * A shopping list can either be associated with a {@link Group} or be a private list
 * for an individual user, identified by the {@code ownerEmail}. The {@code isPrivate} flag
 * distinguishes between these two cases.
 * This entity manages its associated {@link Item}s through a one-to-many relationship
 * with full cascading and orphan removal, ensuring data integrity when a list or its items
 * are modified.
 * Lombok is used for most getters and setters to reduce boilerplate, with some custom
 * methods provided for specific fields.
 *
 * @author Listify Team
 * @version 1.0
 * @see Item
 * @see Group
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "shopping_list")
public class ShoppingList {

    /**
     * The unique identifier for the shopping list.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title or name of the shopping list (e.g., "Weekly Groceries").
     */
    private String title;

    /**
     * A flag to indicate if the list is private (only visible to its owner) or
     * shared within a group. The {@code @JsonProperty} annotation ensures it is
     * serialized as 'isPrivate' in JSON, while being mapped to the 'is_private' column.
     */
    @Column(name = "is_private", nullable = false)
    @JsonProperty("isPrivate")
    private boolean isPrivate;

    /**
     * The group to which this shopping list belongs.
     * This can be {@code null} if the list is private (i.e., not associated with a group).
     */
    @ManyToOne
    @JoinColumn(name = "group_id")
    private Group group;

    /**
     * The list of items on this shopping list.
     * This is a One-to-Many relationship.
     * {@code cascade = CascadeType.ALL}: Operations (persist, merge, remove) on the list are cascaded to its items.
     * {@code orphanRemoval = true}: Ensures that an item removed from this list is also deleted from the database.
     * {@code fetch = FetchType.EAGER}: Items are loaded immediately with the shopping list.
     * The {@code @JsonIgnoreProperties} annotation is essential to prevent infinite recursion during JSON serialization
     * by breaking the circular reference (ShoppingList -> Item -> ShoppingList).
     */
    @OneToMany(
            mappedBy = "shoppingList",
            cascade = CascadeType.ALL,
            orphanRemoval = true,
            fetch = FetchType.EAGER
    )
    @JsonIgnoreProperties("shoppingList")
    private List<Item> items;

    /**
     * Custom getter for the privacy flag.
     *
     * @return {@code true} if the list is private, {@code false} otherwise.
     */
    public Boolean getIsPrivate() {
        return isPrivate;
    }

    /**
     * Custom setter for the privacy flag.
     *
     * @param isPrivate the new privacy status.
     */
    public void setIsPrivate(Boolean isPrivate) {
        this.isPrivate = isPrivate;
    }

    /**
     * The email of the user who owns this list. This is primarily used for private lists
     * that are not associated with a group, allowing for individual ownership.
     */
    @Column(name = "owner_email")
    private String ownerEmail;

    /**
     * Gets the email of the list's owner.
     *
     * @return The owner's email address.
     */
    public String getOwnerEmail() {
        return ownerEmail;
    }

    /**
     * Sets the email of the list's owner.
     *
     * @param ownerEmail The new owner's email address.
     */
    public void setOwnerEmail(String ownerEmail) {
        this.ownerEmail = ownerEmail;
    }
}

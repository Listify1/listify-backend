package com.listify.backend.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.listify.backend.model.enums.GroupType;
import jakarta.persistence.*;
import lombok.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a group of users within the application.
 * This entity is a central part of the data model, bundling users,
 * shopping lists, and debts that belong to this group.
 * The class is mapped to the 'groups' database table using JPA.
 * Lombok annotations such as {@code @Getter}, {@code @Setter}, {@code @NoArgsConstructor},
 * and {@code @AllArgsConstructor} are used to reduce boilerplate code.
 *
 * @author Listify Team
 * @version 1.0
 * @since 2023-10-27
 * @see User
 * @see ShoppingList
 * @see Debt
 * @see GroupType
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "groups")
public class Group {

    /**
     * The unique identifier for the group.
     * It is automatically generated by the database (Identity strategy).
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the group.
     */
    private String name;

    /**
     * The type of the group, e.g., Family, Friends, Shared Flat.
     * Stored as a String in the database.
     * @see GroupType
     */
    @Enumerated(EnumType.STRING)
    private GroupType type;

    /**
     * A unique code that new members can use to join the group.
     */
    private String joinCode;

    /**
     * The list of users who are members of this group.
     * This is a Many-to-Many relationship, realized via the 'group_users' join table.
     * The {@code @JsonIgnoreProperties} annotation prevents an infinite loop during
     * JSON serialization (Group -> User -> Group) and hides sensitive or, in this context,
     * unnecessary data like passwords.
     * @see User
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "group_users",
            joinColumns = @JoinColumn(name = "group_id"),
            inverseJoinColumns = @JoinColumn(name = "user_id")
    )
    @JsonIgnoreProperties({
            "group",          // verhindert Rückreferenz
            "password",       // nicht zurückgeben
            "shoppingLists",  // für Performance auslassen
            "debts",          // ebenfalls auslassen
            "permission",     // falls nicht benötigt
            "status"          // optional
    })
    private List<User> users = new ArrayList<>();

    /**
     * The list of shopping lists belonging to this group.
     * This is a One-to-Many relationship. The {@code @JsonIgnore} annotation is used to
     * avoid a circular dependency during JSON serialization, as a {@link ShoppingList}
     * already holds a reference back to the {@code Group}.
     * @see ShoppingList
     */
    @OneToMany(mappedBy = "group", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JsonIgnore
    private List<ShoppingList> shoppingLists;

    /**
     * The list of debt records within the group.
     * This is a One-to-Many relationship. The {@code @JsonIgnore} annotation is used
     * to prevent circular dependencies during JSON serialization.
     * @see Debt
     */
    @OneToMany(mappedBy = "group", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JsonIgnore
    private List<Debt> debts;

    // Optional: Aktivitäten später aktivieren
    /**
     * A list of activities or events that have occurred within the group.
     * Currently commented out for future implementation.
     */
    // @OneToMany(mappedBy = "group", cascade = CascadeType.ALL)
    // private List<Activity> activities;
}

package com.listify.backend.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.listify.backend.model.enums.ItemStatus;
import jakarta.persistence.*;
import lombok.*;

/**
 * Represents a single item on a {@link ShoppingList}.
 * This entity stores all relevant information about an item, such as its name,
 * quantity, and status (e.g., open, purchased). It also holds references to the user
 * who added the item and, optionally, to the user who bought it.
 * Every item must be associated with a shopping list.
 * Lombok is used to automatically generate getters, setters, and constructors.
 *
 * @author Listify Team
 * @version 1.0
 * @see ShoppingList
 * @see User
 * @see ItemStatus
 */
@Entity
@Table(name = "items")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Item {

    /**
     * The unique identifier for the item.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the item (e.g., "Milk", "Bread").
     */
    private String name;

    /**
     * The desired quantity of the item.
     * Defaults to 1.
     */
    private int quantity = 1;

    /**
     * The current status of the item.
     * Defaults to {@code OPEN} upon creation.
     * @see ItemStatus
     */
    @Enumerated(EnumType.STRING)
    private ItemStatus status = ItemStatus.OFFEN;

    /**
     * The user who added this item to the shopping list.
     * {@code @JsonIgnoreProperties("addedItems")} avoids a circular reference
     * during serialization (Item -> User -> Item).
     */
    @ManyToOne
    @JoinColumn(name = "added_by_id")
    @JsonIgnoreProperties("addedItems")
    private User addedBy;

    /**
     * The user who purchased this item.
     * This field can be {@code null} as long as the item has not been purchased.
     * {@code @JsonIgnoreProperties("boughtItems")} avoids a circular reference.
     */
    @ManyToOne
    @JoinColumn(name = "bought_by_id")
    @JsonIgnoreProperties("boughtItems")
    private User boughtBy;

    /**
     * The shopping list to which this item belongs.
     * This relationship is mandatory (an item cannot exist without a list).
     * {@code @JsonIgnoreProperties("items")} is crucial to prevent an infinite loop
     * during serialization (Item -> ShoppingList -> Item).
     */
    @JsonIgnoreProperties("items")
    @ManyToOne(optional = false)
    @JoinColumn(name = "shopping_list_id", nullable = false)
    private ShoppingList shoppingList;

    /**
     * Convenience constructor to create a new item with a name and an associated
     * shopping list. The status is automatically set to {@code OPEN}.
     *
     * @param name         The name of the new item.
     * @param shoppingList The shopping list to which the item will be added.
     */
    public Item(String name, ShoppingList shoppingList) {
        this.name = name;
        this.shoppingList = shoppingList;
        this.status = ItemStatus.OFFEN;
    }
}
